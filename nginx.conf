user root;                          # Nginx user. CHECK:-  ps aux|grep nginx|grep -v grep
worker_processes 2;                     # Workers, should be equal to no of cpu cores. CHECK: grep processor /proc/cpuinfo | wc -l )
pid /var/run/nginx.pid;                 # Location of pid file.



events {
    use epoll;                          # Epoll is a multiplex technique which helps to handle more clients at once. epoll is available in (and part of) the Linux kernel since version 2.6. Turn this setting on.
    worker_connections 1024;            # Simultaneus user served by nginx server. CHECK: ulimit -n)
    multi_accept on;                    # This settings specifies that nginx should accept as many connections as possible.
}

http {

    ##
    # Basic Settings
    ##

    sendfile on;                        # Sendfile is technically a system call for data transfer. It can be used to move data between two file descriptors inside the kernel. While read+write requires more performance, sendfile() is more efficient. Furthermore activate tcp_nopush and tcp_nodelay. These two tweaks do only work if you also activate sendfile.
    tcp_nopush on;
    tcp_nodelay on;


    # Timeouts

    client_body_timeout 12;             # The client_body_timeout and client_header_timeout directives are responsible for the time a server will wait for a client body or client header to be sent after request. If neither a body or header is sent, the server will issue a 408 error or Request time out.
    client_header_timeout 12;
    keepalive_timeout 15;               # The keepalive_timeout assigns the timeout for keep-alive connections with the client. Simply put, Nginx will close connections with the client after this period of time.
    send_timeout 10;                    # Finally, the send_timeout is established not on the entire transfer of answer, but only between two operations of reading; if after this time client will take nothing, then Nginx is shutting down the connection.
    reset_timedout_connection on;      # Allow the server to close connection on non responding client, this will free up memory.

    #TODO: Check value for this.
    types_hash_max_size 2048;
    keepalive_requests 10000;


    #Removing nginx version
    server_tokens off;
    proxy_hide_header X-Powered-By;
    proxy_hide_header Via;

    #Adding Custom Header
    add_header X-Hola 'Hola Senorita';


    # Buffers
    client_body_buffer_size 10K;       # This handles the client buffer size, meaning any POST actions sent to Nginx. POST actions are typically form submissions.
    client_header_buffer_size 1k;      # Similar to the previous directive, only instead it handles the client header size. For all intents and purposes, 1K is usually a decent size for this directive.
    client_max_body_size 8m;           # The maximum allowed size for a client request. If the maximum size is exceeded, then Nginx will spit out a 413 error or Request Entity Too Large.
    large_client_header_buffers 2 1k;  # The maximum number and size of buffers for large client headers. 


    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_static on     #static .gz file serving
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_http_version 1.1;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_min_length 1400;    #TODO: Check value for this. (If the content to be returned can fit into one single TCP packet, then compressing it is useless. compress if size is bigger than the MTU(1400)
    gzip_proxied any;
    gzip_types text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js;
    gzip_buffers 16 8k;    #TODO: Check value for this.

    ##
    # Adding open file cache
    ##
    open_file_cache max=10000 inactive=30s;
    open_file_cache_valid    60s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;

    include /etc/nginx/conf.d/*.conf;



    ##
    #Settings for AB testing
    ##

    # Assign to a variable named $upstream_variant a psuedo-randomly chosen value,
    # with "test" being assigned 10% of the time, and "original" assigned the
    # remaining 90% of the time. (This is group determination for requests not
    # already containing a group cookie.)
    # See http://nginx.org/en/docs/http/ngx_http_split_clients_module.html
    split_clients "RANDOM-STRING${remote_addr}${http_user_agent}${date_gmt}" $upstream_variant {
        10% "type-1";
        * "type-2";
    }

    # Assign to a variable named $upstream_group a variable mapped from the the
    # value present in the group cookie. If the cookie's value is present, preserve
    # the existing value. If it is not, assign to the value of the $upstream_variant.
    # See http://nginx.org/en/docs/http/ngx_http_map_module.html
    # Note: the value of cookies is available via the $cookie_ variables
    # (i.e. $cookie_my_cookie_name will return the value of the cookie named 'my_cookie_name').
    map $cookie_split_version $upstream_group {
        default    $upstream_variant;
        "type-1"     "type-1";
        "type-2" "type-2";
    }

        # Assign to a variable named $internal_request a value indicating whether or
        # not the given request originates from an internal IP address. If the request
        # originates from an IP within the range defined by 4.3.2.1 to 4.3.2.254, assign 1.
        # Otherwise assign 0.
    # See http://nginx.org/en/docs/http/ngx_http_geo_module.html
    geo $internal_request {
        #ranges;
        xxx.xxx.xxx.xxx 1;  ## Internal Ip
        default 0;
    }

    ##
    #Settings for AB testing ends
    ##


    #Upstream server for Desktop Endpoints.
    upstream server1 {
        server 127.0.0.1:80;
    }

    upstream server2{
        server 127.0.0.1:90;
    }

    upstream server_mobile{
        server mobile.example.com ;
    }

    # the nginx server instance

    server {
        listen 80;
        server_name *.example.com;


        #Checking User-Agent 

        ## Start mobile redirection code
        set $mobile_request false;
        set $mobile_cookie  "";
        set $device_type "desktop";


        #Checking user-agent, tablet is considered a mobile.

        if ($http_user_agent ~* "(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino") {
            set $mobile_request true;
            set $device_type "mobile";
        }

        if ($args ~ 'mobile=false') {
            set $mobile_request false;
            set $device_type "desktop";
            set $mobile_cookie  "mobile=false";
        }

        add_header Set-Cookie $mobile_cookie;

        if ($http_cookie ~ 'mobile=false') {
            set $mobile_request false;
            set $device_type "desktop";
        }

        #Handling static files.
        location ~/assets/{
            root /var/www/assets/;
            access_log off;
            log_not_found off;
            expires max;
            if ($request_uri ~* ^.*?\.(eot)|(ttf)|(woff)$){
                add_header Access-Control-Allow-Origin *;
            }
        }

        location /staticpage {
            index home.html;
            alias /var/www/staticpage/;
        }


        location / {

            ##
            # Implementation for Split Testing
            ##
            set $style-2-active  "true";

            # Default backend server.
            proxy_pass http://server1;

            #Force splitting client using URI. 
            if ( $activate-style-2 ){
                set $upstream_group 'style-2';
            }

            if ( $activate-style-1 ){
                set $upstream_group 'style-1';
            }


            set $style_2_upstream_active "${upstream_group}-${style-2-active}";

            if ($style_2_upstream_active = "style-2-true") {
                proxy_pass http://server2;
                add_header Set-Cookie "split_version=$upstream_group;Path=/;Max-Age=86400;";
            }
            ## 
            # Splitting implementation ends
            ##

            # Using mobile server for requests from mobile browser.
            if ( $mobile_request = true ) {
                proxy_pass http://server_mobile;
            }


            # Header send to backend servers. Caches can use this to cache Desktop/Mobile content separately. 
            proxy_set_header X-Device-Type "X-Device-Type--${device_type}"; 
            proxy_redirect off;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host www.example.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-NginX-Proxy true;
            proxy_http_version 1.1;
        }

        # Nginx status
        location = /status {
            stub_status on;
            #allow 127.0.0.1;
            #allow 12.13.14.15;
            #deny all;
            allow all;
        }
    }

    # Rules for Secondary site, abc.com
    server {
        listen 80 ;
        server_name *.abc.com;
        access_log /var/log/nginx/abc/access.log;
        error_log /var/log/nginx/abc/error.log;
    }
}
